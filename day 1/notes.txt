                              #MACHINE LEARNING USING PYTHON PROGRAMMING#
                              ___________________________________________


#Rules of variables:-

1.cant start with number
ex. 1='python',a1='python'

2.no space
a 1='python'

3.cant use special character
a$ = 'hello';a_1='hi'; _=200

4.cant use keywords

#PYTHON OPERATOR:-
 
7 types:-

1. arithmatic(+,-,*,/,%,//,**)

2. comparison/relational operator(<,>,>=,<=,!=,==)

3. assignment opr(+,+=,_=,*=,/*,//=)

4. bitwise(&,|,^)

5. logical operator(and,or,not)

6. identity operator(is,is not)

7. membership operator(in,not in)
_______________________________________________________

() -- function,expression,tuple
[] -- list,indexing,slicing
{} -- set,dictionary
<> -- no use
_______________________________________________________

#Python data types:-

1. numeric -- int -- a=5
             float --b=5.5
             complex = 3+5j
2. string ---str -- a='hello'/a="Hello"/a="hi"
                    b="'hello"'(not possible)

3. list --- list -- my_list = ['abc',5,5.5,2+6j]

4. tuple --- tuple -- my_tuple = (45,4.5,'hii','bye') 

5. set --- set -- {1,12,44,30}

6. dictionary --- dict = {key : value} 

7. boolean --- true,false
________________________________________________________

 
#String :-

1. indexing -- positive,negative
   a='hello'
   he
   a[starting point:stop:step]
a=a.capitalize()
a.center()
a.count()
a.lstrip()
a.rstrip()
a.strip()
a.upper()
a.lower()
a.startswith()
a.endswith()
a=a.split()
''.join()
______________________________________________________

List :-

1.[]
2. homo/hetro
3.mutable
4.indexing/slicing,loop

m+=['new value']
m.append()
m.extend()
m.insert(position,value)
m.pop()
m.clear()
m.reverse()
m.sort()
max()
min()
m.index()   
________________________________________________________

Tuple:-

1.()
2.comma sep val
3.immutable
4.homo/hetro

type()
len()
t.index()
t[]
t[:]

_______________________________________________________


Set:-

1.unordered
2.indexing/slicing(no use)
3.unique collection
4.{}

s.intersection()
s.union()
s.add()
s.discard()
s.remove()
s.update()
s.clear()
max()
min()
len()
______________________________________________________

Data type dictionary:-

1.unordered
2.key value pair
3.indexing,slicing(not possible)

len()
d1.key()
d1.values()
d1.items()
d1['key']=[values]
d1['key'][index]='value'
del d1['keys']
d1.get('key') 
_______________________________________________________

print()
print(a,b)
print(a,b,sep='value')
a=input('statement')
a=data type(input('statement'))

3 statements:-

1.condition/decision making--if-elif-else(suiters/indentation)
2.looping--for and while
3.exception handling---try,except

________________________________________________________

Simple if:-

if age<18:
      print('a gift')
if age>=18 and age<=20:
      print('A GIFT')
      print('a task')
if age>age:
    print('koi gift nahi hai')   

__________________________________________________________

Ladder:-

if age < 18:
print('A GIFT')
elif>=18  and age<=20:
print('a gift')
print('a task')
else:
print('koi gift nahi hai')   
__________________________________________________________

Nested:-

if today =='saturday':
print('half day work')
elif today=='sunday':
if condition=='sick':
print('take rest')
else:
print('party')
__________________________________________________________

range(start point(including), stop point(excluding), step(by default 1) )
d['key']+=['value']
d['key'].insert(index,value)
f'hi {value} welcome to {value}'
'hi {} welcome to {}'.formate('value','value')
___________________________________________________________

Loop:-

1.for loop
2.while loop

for i in[1,2,3,4,5]:
    print(i)

num=1
while num<=5:
  print('hello')
  num+=1
____________________________________________________________

Function:-

1.NO i/p NO o/p
2.No i/p But O/P
3.i/p nut No O/P
4.O/P and i/P
----------------
1. taking multiple i/p
2.returning multiplication o/p
3.keyword argument
4.default values
5. *args(gives tuple)
6.**kwargs(gives dictionary)

def name():
myadd=lambda x,y,z:x+y+z
_____________________________________________________________

module---it is a .py file;ex-OS,MAths
packages---collection of modules
libraries---collection of packages

